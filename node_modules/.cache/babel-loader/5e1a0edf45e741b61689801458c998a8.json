{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\TR\\\\Desktop\\\\ddswap-interface\\\\src\\\\components\\\\CurrencyLogo\\\\index.tsx\";\nimport { ETHER, Token } from 'ddswap-sdk';\nimport React, { useMemo } from 'react';\nimport { useWeb3React } from '@web3-react/core';\nimport styled from 'styled-components';\nimport EthereumLogo from '../../assets/images/ethereum-logo.png';\nimport ConfluxLogo from '../../assets/images/conflux-logo.png';\nimport HtLogo from '../../assets/images/ht-logo.png';\nimport BnbLogo from '../../assets/images/bnb-logo.png';\nimport useHttpLocations from '../../hooks/useHttpLocations';\nimport { WrappedTokenInfo } from '../../state/lists/hooks';\nimport Logo from '../Logo';\n\nconst getTokenLogoURL = address => `https://www.dsme.vip/assest/ethereum/assest/${address}/logo.png`;\n/*`https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/assets/${address}/logo.png`*/\n\n\nconst StyledEthereumLogo = styled.img`\n  width: ${({\n  size\n}) => size};\n  height: ${({\n  size\n}) => size};\n  box-shadow: 0px 6px 10px rgba(0, 0, 0, 0.075);\n  border-radius: 24px;\n`;\nconst StyledLogo = styled(Logo)`\n  width: ${({\n  size\n}) => size};\n  height: ${({\n  size\n}) => size};\n`;\nexport default function CurrencyLogo({\n  currency,\n  size = '24px',\n  style\n}) {\n  var _currency$symbol;\n\n  //获取chainid\n  const uriLocations = useHttpLocations(currency instanceof WrappedTokenInfo ? currency.logoURI : undefined);\n  const {\n    chainId\n  } = useWeb3React();\n  const srcs = useMemo(() => {\n    if (currency === ETHER) return [];\n\n    if (currency instanceof Token) {\n      if (currency instanceof WrappedTokenInfo) {\n        return [...uriLocations, getTokenLogoURL(currency.address)];\n      }\n\n      return [getTokenLogoURL(currency.address)];\n    }\n\n    return [];\n  }, [currency, uriLocations]); //通过chainid切换coinlogo\n\n  if (currency === ETHER) {\n    if (chainId === 1) {\n      return /*#__PURE__*/React.createElement(StyledEthereumLogo, {\n        src: EthereumLogo,\n        size: size,\n        style: style,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 14\n        }\n      });\n    } else if (chainId === 1030) {\n      return /*#__PURE__*/React.createElement(StyledEthereumLogo, {\n        src: ConfluxLogo,\n        size: size,\n        style: style,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 14\n        }\n      });\n    } else if (chainId === 128) {\n      return /*#__PURE__*/React.createElement(StyledEthereumLogo, {\n        src: HtLogo,\n        size: size,\n        style: style,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 14\n        }\n      });\n    } else if (chainId === 56) {\n      return /*#__PURE__*/React.createElement(StyledEthereumLogo, {\n        src: BnbLogo,\n        size: size,\n        style: style,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 14\n        }\n      });\n    } else {\n      return /*#__PURE__*/React.createElement(StyledEthereumLogo, {\n        src: EthereumLogo,\n        size: size,\n        style: style,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 14\n        }\n      });\n    }\n  }\n\n  return /*#__PURE__*/React.createElement(StyledLogo, {\n    size: size,\n    srcs: srcs,\n    alt: `${(_currency$symbol = currency === null || currency === void 0 ? void 0 : currency.symbol) !== null && _currency$symbol !== void 0 ? _currency$symbol : 'token'} logo`,\n    style: style,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 10\n    }\n  });\n}","map":{"version":3,"sources":["C:/Users/TR/Desktop/ddswap-interface/src/components/CurrencyLogo/index.tsx"],"names":["ETHER","Token","React","useMemo","useWeb3React","styled","EthereumLogo","ConfluxLogo","HtLogo","BnbLogo","useHttpLocations","WrappedTokenInfo","Logo","getTokenLogoURL","address","StyledEthereumLogo","img","size","StyledLogo","CurrencyLogo","currency","style","uriLocations","logoURI","undefined","chainId","srcs","symbol"],"mappings":"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","sourcesContent":["import { Currency, ETHER, Token } from 'ddswap-sdk'\nimport React, { useMemo } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport styled from 'styled-components'\n\nimport EthereumLogo from '../../assets/images/ethereum-logo.png'\nimport ConfluxLogo from '../../assets/images/conflux-logo.png'\nimport HtLogo from '../../assets/images/ht-logo.png'\nimport BnbLogo from '../../assets/images/bnb-logo.png'\nimport useHttpLocations from '../../hooks/useHttpLocations'\nimport { WrappedTokenInfo } from '../../state/lists/hooks'\nimport Logo from '../Logo'\n\nconst getTokenLogoURL = (address: string) =>\n  `https://www.dsme.vip/assest/ethereum/assest/${address}/logo.png`\n  /*`https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/assets/${address}/logo.png`*/\n\nconst StyledEthereumLogo = styled.img<{ size: string }>`\n  width: ${({ size }) => size};\n  height: ${({ size }) => size};\n  box-shadow: 0px 6px 10px rgba(0, 0, 0, 0.075);\n  border-radius: 24px;\n`\n\n\nconst StyledLogo = styled(Logo)<{ size: string }>`\n  width: ${({ size }) => size};\n  height: ${({ size }) => size};\n`\n\nexport default function CurrencyLogo({\n  currency,\n  size = '24px',\n  style\n}: {\n  currency?: Currency\n  size?: string\n  style?: React.CSSProperties\n}) {\n  \n  //获取chainid\n  const uriLocations = useHttpLocations(currency instanceof WrappedTokenInfo ? currency.logoURI : undefined)\n  const {chainId} = useWeb3React()\n\n  const srcs: string[] = useMemo(() => {\n    if (currency === ETHER) return []\n\n    if (currency instanceof Token) {\n      if (currency instanceof WrappedTokenInfo) {\n        return [...uriLocations, getTokenLogoURL(currency.address)]\n      }\n\n      return [getTokenLogoURL(currency.address)]\n    }\n    return []\n  }, [currency, uriLocations])\n\n  //通过chainid切换coinlogo\n  if (currency === ETHER) {\n    if(chainId === 1 ){\n      return <StyledEthereumLogo src={EthereumLogo} size={size} style={style} />\n    }else if(chainId === 1030 ){\n      return <StyledEthereumLogo src={ConfluxLogo} size={size} style={style} />\n    }else if(chainId === 128 ){\n      return <StyledEthereumLogo src={HtLogo} size={size} style={style} />\n    }else if(chainId === 56){\n      return <StyledEthereumLogo src={BnbLogo} size={size} style={style} />\n    }\n    else{\n      return <StyledEthereumLogo src={EthereumLogo} size={size} style={style} />\n    }\n  }\n\n  return <StyledLogo size={size} srcs={srcs} alt={`${currency?.symbol ?? 'token'} logo`} style={style} />\n}\n"]},"metadata":{},"sourceType":"module"}