{"version":3,"file":"ddswap-token-lists.esm.js","sources":["../src/versionComparator.ts","../src/isVersionUpdate.ts","../src/getVersionUpgrade.ts","../src/diffTokenLists.ts","../src/minVersionBump.ts","../src/nextVersion.ts"],"sourcesContent":["import { Version } from './types';\r\n\r\n/**\r\n * Comparator function that allows sorting version from lowest to highest\r\n * @param versionA version A to compare\r\n * @param versionB version B to compare\r\n * @returns -1 if versionA comes before versionB, 0 if versionA is equal to version B, and 1 if version A comes after version B\r\n */\r\nexport function versionComparator(\r\n  versionA: Version,\r\n  versionB: Version\r\n): -1 | 0 | 1 {\r\n  if (versionA.major < versionB.major) {\r\n    return -1;\r\n  } else if (versionA.major > versionB.major) {\r\n    return 1;\r\n  } else if (versionA.minor < versionB.minor) {\r\n    return -1;\r\n  } else if (versionA.minor > versionB.minor) {\r\n    return 1;\r\n  } else if (versionA.patch < versionB.patch) {\r\n    return -1;\r\n  } else if (versionA.patch > versionB.patch) {\r\n    return 1;\r\n  } else {\r\n    return 0;\r\n  }\r\n}\r\n","import { versionComparator } from './versionComparator';\r\nimport { Version } from './types';\r\n\r\n/**\r\n * Returns true if versionB is an update over versionA\r\n */\r\nexport function isVersionUpdate(base: Version, update: Version): boolean {\r\n  return versionComparator(base, update) < 0;\r\n}\r\n","/**\r\n * Enum describing types of version differences\r\n */\r\nimport { Version } from './types';\r\n\r\nexport enum VersionUpgrade {\r\n  NONE,\r\n  PATCH,\r\n  MINOR,\r\n  MAJOR,\r\n}\r\n\r\n/**\r\n * Return the upgrade type from the base version to the update version.\r\n * Note that downgrades and equivalent versions are both treated as `NONE`.\r\n * @param base base list\r\n * @param update update to the list\r\n */\r\nexport function getVersionUpgrade(\r\n  base: Version,\r\n  update: Version\r\n): VersionUpgrade {\r\n  if (update.major > base.major) {\r\n    return VersionUpgrade.MAJOR;\r\n  }\r\n  if (update.major < base.major) {\r\n    return VersionUpgrade.NONE;\r\n  }\r\n  if (update.minor > base.minor) {\r\n    return VersionUpgrade.MINOR;\r\n  }\r\n  if (update.minor < base.minor) {\r\n    return VersionUpgrade.NONE;\r\n  }\r\n  return update.patch > base.patch ? VersionUpgrade.PATCH : VersionUpgrade.NONE;\r\n}\r\n","import { TokenInfo } from './types';\r\n\r\nexport type TokenInfoChangeKey = Exclude<\r\n  keyof TokenInfo,\r\n  'address' | 'chainId'\r\n>;\r\nexport type TokenInfoChanges = Array<TokenInfoChangeKey>;\r\n\r\n/**\r\n * compares two token info key values\r\n * this subset of full deep equal functionality does not work on objects or object arrays\r\n * @param a comparison item a\r\n * @param b comparison item b\r\n */\r\nfunction compareTokenInfoProperty(a: unknown, b: unknown): boolean {\r\n  if (a === b) return true;\r\n  if (typeof a !== typeof b) return false;\r\n  if (Array.isArray(a) && Array.isArray(b)) {\r\n    return a.every((el, i) => b[i] === el);\r\n  }\r\n  return false;\r\n}\r\n\r\n/**\r\n * Differences between a base list and an updated list.\r\n */\r\nexport interface TokenListDiff {\r\n  /**\r\n   * Tokens from updated with chainId/address not present in base list\r\n   */\r\n  readonly added: TokenInfo[];\r\n  /**\r\n   * Tokens from base with chainId/address not present in the updated list\r\n   */\r\n  readonly removed: TokenInfo[];\r\n  /**\r\n   * The token info that changed\r\n   */\r\n  readonly changed: {\r\n    [chainId: number]: {\r\n      [address: string]: TokenInfoChanges;\r\n    };\r\n  };\r\n}\r\n\r\n/**\r\n * Computes the diff of a token list where the first argument is the base and the second argument is the updated list.\r\n * @param base base list\r\n * @param update updated list\r\n */\r\nexport function diffTokenLists(\r\n  base: TokenInfo[],\r\n  update: TokenInfo[]\r\n): TokenListDiff {\r\n  const indexedBase = base.reduce<{\r\n    [chainId: number]: { [address: string]: TokenInfo };\r\n  }>((memo, tokenInfo) => {\r\n    if (!memo[tokenInfo.chainId]) memo[tokenInfo.chainId] = {};\r\n    memo[tokenInfo.chainId][tokenInfo.address] = tokenInfo;\r\n    return memo;\r\n  }, {});\r\n\r\n  const newListUpdates = update.reduce<{\r\n    added: TokenInfo[];\r\n    changed: {\r\n      [chainId: number]: {\r\n        [address: string]: TokenInfoChanges;\r\n      };\r\n    };\r\n    index: {\r\n      [chainId: number]: {\r\n        [address: string]: true;\r\n      };\r\n    };\r\n  }>(\r\n    (memo, tokenInfo) => {\r\n      const baseToken = indexedBase[tokenInfo.chainId]?.[tokenInfo.address];\r\n      if (!baseToken) {\r\n        memo.added.push(tokenInfo);\r\n      } else {\r\n        const changes: TokenInfoChanges = Object.keys(tokenInfo)\r\n          .filter(\r\n            (s): s is TokenInfoChangeKey => s !== 'address' && s !== 'chainId'\r\n          )\r\n          .filter(s => {\r\n            return !compareTokenInfoProperty(tokenInfo[s], baseToken[s]);\r\n          });\r\n        if (changes.length > 0) {\r\n          if (!memo.changed[tokenInfo.chainId]) {\r\n            memo.changed[tokenInfo.chainId] = {};\r\n          }\r\n          memo.changed[tokenInfo.chainId][tokenInfo.address] = changes;\r\n        }\r\n      }\r\n\r\n      if (!memo.index[tokenInfo.chainId]) {\r\n        memo.index[tokenInfo.chainId] = {\r\n          [tokenInfo.address]: true,\r\n        };\r\n      } else {\r\n        memo.index[tokenInfo.chainId][tokenInfo.address] = true;\r\n      }\r\n\r\n      return memo;\r\n    },\r\n    { added: [], changed: {}, index: {} }\r\n  );\r\n\r\n  const removed = base.reduce<TokenInfo[]>((list, curr) => {\r\n    if (\r\n      !newListUpdates.index[curr.chainId] ||\r\n      !newListUpdates.index[curr.chainId][curr.address]\r\n    ) {\r\n      list.push(curr);\r\n    }\r\n    return list;\r\n  }, []);\r\n\r\n  return {\r\n    added: newListUpdates.added,\r\n    changed: newListUpdates.changed,\r\n    removed,\r\n  };\r\n}\r\n","import { diffTokenLists } from './diffTokenLists';\r\nimport { VersionUpgrade } from './getVersionUpgrade';\r\nimport { TokenInfo } from './types';\r\n\r\n/**\r\n * Returns the minimum version bump for the given list\r\n * @param baseList the base list of tokens\r\n * @param updatedList the updated list of tokens\r\n */\r\nexport function minVersionBump(\r\n  baseList: TokenInfo[],\r\n  updatedList: TokenInfo[]\r\n): VersionUpgrade {\r\n  const diff = diffTokenLists(baseList, updatedList);\r\n  if (diff.removed.length > 0) return VersionUpgrade.MAJOR;\r\n  if (diff.added.length > 0) return VersionUpgrade.MINOR;\r\n  if (Object.keys(diff.changed).length > 0) return VersionUpgrade.PATCH;\r\n  return VersionUpgrade.NONE;\r\n}\r\n","import { VersionUpgrade } from './getVersionUpgrade';\r\nimport { Version } from './types';\r\n\r\n/**\r\n * Returns the next version of the list given a base version and the upgrade type\r\n * @param base current version\r\n * @param bump the upgrade type\r\n */\r\nexport function nextVersion(base: Version, bump: VersionUpgrade): Version {\r\n  switch (bump) {\r\n    case VersionUpgrade.NONE:\r\n      return base;\r\n\r\n    case VersionUpgrade.MAJOR:\r\n      return { major: base.major + 1, minor: 0, patch: 0 };\r\n\r\n    case VersionUpgrade.MINOR:\r\n      return {\r\n        major: base.major,\r\n        minor: base.minor + 1,\r\n        patch: 0,\r\n      };\r\n\r\n    case VersionUpgrade.PATCH:\r\n      return {\r\n        major: base.major,\r\n        minor: base.minor,\r\n        patch: base.patch + 1,\r\n      };\r\n  }\r\n}\r\n"],"names":["versionComparator","versionA","versionB","major","minor","patch","isVersionUpdate","base","update","VersionUpgrade","getVersionUpgrade","MAJOR","NONE","MINOR","PATCH","compareTokenInfoProperty","a","b","Array","isArray","every","el","i","diffTokenLists","indexedBase","reduce","memo","tokenInfo","chainId","address","newListUpdates","baseToken","added","push","changes","Object","keys","filter","s","length","changed","index","removed","list","curr","minVersionBump","baseList","updatedList","diff","nextVersion","bump"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;;;;;;AAMA,SAAgBA,kBACdC,UACAC;AAEA,MAAID,QAAQ,CAACE,KAAT,GAAiBD,QAAQ,CAACC,KAA9B,EAAqC;AACnC,WAAO,CAAC,CAAR;AACD,GAFD,MAEO,IAAIF,QAAQ,CAACE,KAAT,GAAiBD,QAAQ,CAACC,KAA9B,EAAqC;AAC1C,WAAO,CAAP;AACD,GAFM,MAEA,IAAIF,QAAQ,CAACG,KAAT,GAAiBF,QAAQ,CAACE,KAA9B,EAAqC;AAC1C,WAAO,CAAC,CAAR;AACD,GAFM,MAEA,IAAIH,QAAQ,CAACG,KAAT,GAAiBF,QAAQ,CAACE,KAA9B,EAAqC;AAC1C,WAAO,CAAP;AACD,GAFM,MAEA,IAAIH,QAAQ,CAACI,KAAT,GAAiBH,QAAQ,CAACG,KAA9B,EAAqC;AAC1C,WAAO,CAAC,CAAR;AACD,GAFM,MAEA,IAAIJ,QAAQ,CAACI,KAAT,GAAiBH,QAAQ,CAACG,KAA9B,EAAqC;AAC1C,WAAO,CAAP;AACD,GAFM,MAEA;AACL,WAAO,CAAP;AACD;AACF;;ACxBD;;;;AAGA,SAAgBC,gBAAgBC,MAAeC;AAC7C,SAAOR,iBAAiB,CAACO,IAAD,EAAOC,MAAP,CAAjB,GAAkC,CAAzC;AACD;;ICHWC,cAAZ;;AAAA,WAAYA;AACVA,EAAAA,0CAAA,SAAA;AACAA,EAAAA,2CAAA,UAAA;AACAA,EAAAA,2CAAA,UAAA;AACAA,EAAAA,2CAAA,UAAA;AACD,CALD,EAAYA,cAAc,KAAdA,cAAc,KAAA,CAA1B;AAOA;;;;;;;;AAMA,SAAgBC,kBACdH,MACAC;AAEA,MAAIA,MAAM,CAACL,KAAP,GAAeI,IAAI,CAACJ,KAAxB,EAA+B;AAC7B,WAAOM,cAAc,CAACE,KAAtB;AACD;;AACD,MAAIH,MAAM,CAACL,KAAP,GAAeI,IAAI,CAACJ,KAAxB,EAA+B;AAC7B,WAAOM,cAAc,CAACG,IAAtB;AACD;;AACD,MAAIJ,MAAM,CAACJ,KAAP,GAAeG,IAAI,CAACH,KAAxB,EAA+B;AAC7B,WAAOK,cAAc,CAACI,KAAtB;AACD;;AACD,MAAIL,MAAM,CAACJ,KAAP,GAAeG,IAAI,CAACH,KAAxB,EAA+B;AAC7B,WAAOK,cAAc,CAACG,IAAtB;AACD;;AACD,SAAOJ,MAAM,CAACH,KAAP,GAAeE,IAAI,CAACF,KAApB,GAA4BI,cAAc,CAACK,KAA3C,GAAmDL,cAAc,CAACG,IAAzE;AACD;;AC3BD;;;;;;AAMA,SAASG,wBAAT,CAAkCC,CAAlC,EAA8CC,CAA9C;AACE,MAAID,CAAC,KAAKC,CAAV,EAAa,OAAO,IAAP;AACb,MAAI,OAAOD,CAAP,KAAa,OAAOC,CAAxB,EAA2B,OAAO,KAAP;;AAC3B,MAAIC,KAAK,CAACC,OAAN,CAAcH,CAAd,KAAoBE,KAAK,CAACC,OAAN,CAAcF,CAAd,CAAxB,EAA0C;AACxC,WAAOD,CAAC,CAACI,KAAF,CAAQ,UAACC,EAAD,EAAKC,CAAL;AAAA,aAAWL,CAAC,CAACK,CAAD,CAAD,KAASD,EAApB;AAAA,KAAR,CAAP;AACD;;AACD,SAAO,KAAP;AACD;AAwBD;;;;;;;AAKA,SAAgBE,eACdhB,MACAC;AAEA,MAAMgB,WAAW,GAAGjB,IAAI,CAACkB,MAAL,CAEjB,UAACC,IAAD,EAAOC,SAAP;AACD,QAAI,CAACD,IAAI,CAACC,SAAS,CAACC,OAAX,CAAT,EAA8BF,IAAI,CAACC,SAAS,CAACC,OAAX,CAAJ,GAA0B,EAA1B;AAC9BF,IAAAA,IAAI,CAACC,SAAS,CAACC,OAAX,CAAJ,CAAwBD,SAAS,CAACE,OAAlC,IAA6CF,SAA7C;AACA,WAAOD,IAAP;AACD,GANmB,EAMjB,EANiB,CAApB;AAQA,MAAMI,cAAc,GAAGtB,MAAM,CAACiB,MAAP,CAarB,UAACC,IAAD,EAAOC,SAAP;;;AACE,QAAMI,SAAS,4BAAGP,WAAW,CAACG,SAAS,CAACC,OAAX,CAAd,qBAAG,sBAAiCD,SAAS,CAACE,OAA3C,CAAlB;;AACA,QAAI,CAACE,SAAL,EAAgB;AACdL,MAAAA,IAAI,CAACM,KAAL,CAAWC,IAAX,CAAgBN,SAAhB;AACD,KAFD,MAEO;AACL,UAAMO,OAAO,GAAqBC,MAAM,CAACC,IAAP,CAAYT,SAAZ,EAC/BU,MAD+B,CAE9B,UAACC,CAAD;AAAA,eAAgCA,CAAC,KAAK,SAAN,IAAmBA,CAAC,KAAK,SAAzD;AAAA,OAF8B,EAI/BD,MAJ+B,CAIxB,UAAAC,CAAC;AACP,eAAO,CAACvB,wBAAwB,CAACY,SAAS,CAACW,CAAD,CAAV,EAAeP,SAAS,CAACO,CAAD,CAAxB,CAAhC;AACD,OAN+B,CAAlC;;AAOA,UAAIJ,OAAO,CAACK,MAAR,GAAiB,CAArB,EAAwB;AACtB,YAAI,CAACb,IAAI,CAACc,OAAL,CAAab,SAAS,CAACC,OAAvB,CAAL,EAAsC;AACpCF,UAAAA,IAAI,CAACc,OAAL,CAAab,SAAS,CAACC,OAAvB,IAAkC,EAAlC;AACD;;AACDF,QAAAA,IAAI,CAACc,OAAL,CAAab,SAAS,CAACC,OAAvB,EAAgCD,SAAS,CAACE,OAA1C,IAAqDK,OAArD;AACD;AACF;;AAED,QAAI,CAACR,IAAI,CAACe,KAAL,CAAWd,SAAS,CAACC,OAArB,CAAL,EAAoC;AAAA;;AAClCF,MAAAA,IAAI,CAACe,KAAL,CAAWd,SAAS,CAACC,OAArB,uDACGD,SAAS,CAACE,OADb,IACuB,IADvB;AAGD,KAJD,MAIO;AACLH,MAAAA,IAAI,CAACe,KAAL,CAAWd,SAAS,CAACC,OAArB,EAA8BD,SAAS,CAACE,OAAxC,IAAmD,IAAnD;AACD;;AAED,WAAOH,IAAP;AACD,GA1CoB,EA2CrB;AAAEM,IAAAA,KAAK,EAAE,EAAT;AAAaQ,IAAAA,OAAO,EAAE,EAAtB;AAA0BC,IAAAA,KAAK,EAAE;AAAjC,GA3CqB,CAAvB;AA8CA,MAAMC,OAAO,GAAGnC,IAAI,CAACkB,MAAL,CAAyB,UAACkB,IAAD,EAAOC,IAAP;AACvC,QACE,CAACd,cAAc,CAACW,KAAf,CAAqBG,IAAI,CAAChB,OAA1B,CAAD,IACA,CAACE,cAAc,CAACW,KAAf,CAAqBG,IAAI,CAAChB,OAA1B,EAAmCgB,IAAI,CAACf,OAAxC,CAFH,EAGE;AACAc,MAAAA,IAAI,CAACV,IAAL,CAAUW,IAAV;AACD;;AACD,WAAOD,IAAP;AACD,GARe,EAQb,EARa,CAAhB;AAUA,SAAO;AACLX,IAAAA,KAAK,EAAEF,cAAc,CAACE,KADjB;AAELQ,IAAAA,OAAO,EAAEV,cAAc,CAACU,OAFnB;AAGLE,IAAAA,OAAO,EAAPA;AAHK,GAAP;AAKD;;ACvHD;;;;;;AAKA,SAAgBG,eACdC,UACAC;AAEA,MAAMC,IAAI,GAAGzB,cAAc,CAACuB,QAAD,EAAWC,WAAX,CAA3B;AACA,MAAIC,IAAI,CAACN,OAAL,CAAaH,MAAb,GAAsB,CAA1B,EAA6B,OAAO9B,cAAc,CAACE,KAAtB;AAC7B,MAAIqC,IAAI,CAAChB,KAAL,CAAWO,MAAX,GAAoB,CAAxB,EAA2B,OAAO9B,cAAc,CAACI,KAAtB;AAC3B,MAAIsB,MAAM,CAACC,IAAP,CAAYY,IAAI,CAACR,OAAjB,EAA0BD,MAA1B,GAAmC,CAAvC,EAA0C,OAAO9B,cAAc,CAACK,KAAtB;AAC1C,SAAOL,cAAc,CAACG,IAAtB;AACD;;ACfD;;;;;;AAKA,SAAgBqC,YAAY1C,MAAe2C;AACzC,UAAQA,IAAR;AACE,SAAKzC,cAAc,CAACG,IAApB;AACE,aAAOL,IAAP;;AAEF,SAAKE,cAAc,CAACE,KAApB;AACE,aAAO;AAAER,QAAAA,KAAK,EAAEI,IAAI,CAACJ,KAAL,GAAa,CAAtB;AAAyBC,QAAAA,KAAK,EAAE,CAAhC;AAAmCC,QAAAA,KAAK,EAAE;AAA1C,OAAP;;AAEF,SAAKI,cAAc,CAACI,KAApB;AACE,aAAO;AACLV,QAAAA,KAAK,EAAEI,IAAI,CAACJ,KADP;AAELC,QAAAA,KAAK,EAAEG,IAAI,CAACH,KAAL,GAAa,CAFf;AAGLC,QAAAA,KAAK,EAAE;AAHF,OAAP;;AAMF,SAAKI,cAAc,CAACK,KAApB;AACE,aAAO;AACLX,QAAAA,KAAK,EAAEI,IAAI,CAACJ,KADP;AAELC,QAAAA,KAAK,EAAEG,IAAI,CAACH,KAFP;AAGLC,QAAAA,KAAK,EAAEE,IAAI,CAACF,KAAL,GAAa;AAHf,OAAP;AAfJ;AAqBD;;;;"}